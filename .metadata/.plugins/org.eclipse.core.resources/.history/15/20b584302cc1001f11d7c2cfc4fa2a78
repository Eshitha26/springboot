package com.tcs.mvc.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tcs.mvc.entity.ProductEntity;
import com.tcs.mvc.model.ProductModel;
import com.tcs.mvc.repository.ProductRepository;

@Service
public class ProductService
{
	@Autowired
	ProductRepository productRepository;
	public void saveproductdetails(ProductModel productModel) {
		double stockvalue;
		   stockvalue=productModel.getPrice()*productModel.getQuantity();
		   
		   double discountprice;
		   discountprice=productModel.getPrice()*productModel.getDiscountrate();
		   
		   double taxprice;
	        taxprice=productModel.getPrice()*0.18;
	        
	 	   double offerprice;
	       offerprice=productModel.getPrice()-discountprice;
	        
		   double finalprice;
	        finalprice= offerprice+taxprice;
	        
	        ProductEntity productEntity=new ProductEntity();
	        productEntity.setName(productModel.getName());
	        productEntity.setBrand(productModel.getBrand());
	        productEntity.setMadeIn(productModel.getMadeIn());
	        productEntity.setPrice(productModel.getPrice());
	        productEntity.setQuantity(productModel.getQuantity());
	        productEntity.setDiscountRate(productModel.getDiscountrate());
	        productEntity.setDiscountPrice(discountprice);
	        
	        productEntity.setTaxPrice(taxprice);
	        productEntity.setOfferPrice(offerprice); 
	        productEntity.setFinalPrice(finalprice);
	        productEntity.setStockValue(stockvalue);
	        productRepository.save(productEntity);
	   }
	   public List<ProductEntity>getAllProducts()
	   {
		   List<ProductEntity>products=productRepository.findAll();
		   return products;
	   }
	   
	   public ProductEntity searchbyid(Long id)
	   {
		   Optional<ProductEntity>optionaldata = productRepository.findById(id);
		   if(optionaldata.isPresent())
		   {
			   ProductEntity product = optionaldata.get();
			   return product;
		   }
		   else 
		   {
			return null;
		}
			
		}
	public void deleteByID(Long id) {
		productRepository.deleteById(id);
		
	}
	public ProductModel editProductById(Long id ) 
	{
		
Optional<ProductEntity> optionalProduct = productRepository.findById(id);
        
        if (optionalProduct.isPresent())
        {
            ProductEntity productEntity = optionalProduct.get();
            
            
            ProductModel productModel = new ProductModel();
            
            productModel.setName(productEntity.getName());
            productModel.setBrand(productEntity.getBrand());
            productModel.setMadeIn(productEntity.getMadeIn());
            productModel.setPrice(productEntity.getPrice());
            productModel.setQuantity(productEntity.getQuantity());
            productModel.setDiscountrate(productEntity.getDiscountRate());
            productEntity.setDiscountPrice(discountPrice);
            return productModel;
            
        } else {
            
            return null; 
        }
		
		
	}
}
		