package com.tcs.mvc.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tcs.mvc.entity.ProductEntity;
import com.tcs.mvc.model.ProductModel;
import com.tcs.mvc.repository.ProductRepository;

@Service
public class ProductService
{
	@Autowired
	ProductRepository productRepository;
	private double discountPrice;
	private double offerprice;
	private double taxprice;
	private double finalprice;
	private double stockvalue;
	public void saveproductdetails(ProductModel productModel) {
		double stockvalue;
		   stockvalue=productModel.getPrice()*productModel.getQuantity();
		   
		   double discountprice;
		   discountprice=productModel.getPrice()*productModel.getDiscountrate();
		   
		   double taxprice;
	        taxprice=productModel.getPrice()*0.18;
	        
	 	   double offerprice;
	       offerprice=productModel.getPrice()-discountprice;
	        
		   double finalprice;
	        finalprice= offerprice+taxprice;
	        
	        ProductEntity productEntity=new ProductEntity();
	        productEntity.setName(productModel.getName());
	        productEntity.setBrand(productModel.getBrand());
	        productEntity.setMadeIn(productModel.getMadeIn());
	        productEntity.setPrice(productModel.getPrice());
	        productEntity.setQuantity(productModel.getQuantity());
	        productEntity.setDiscountRate(productModel.getDiscountrate());
	        productEntity.setDiscountPrice(discountprice);
	        
	        productEntity.setTaxPrice(taxprice);
	        productEntity.setOfferPrice(offerprice); 
	        productEntity.setFinalPrice(finalprice);
	        productEntity.setStockValue(stockvalue);
	        productRepository.save(productEntity);
	   }
	   public List<ProductEntity>getAllProducts()
	   {
		   List<ProductEntity>products=productRepository.findAll();
		   return products;
	   }
	   
	   public ProductEntity searchbyid(Long id)
	   {
		   Optional<ProductEntity>optionaldata = productRepository.findById(id);
		   if(optionaldata.isPresent())
		   {
			   ProductEntity product = optionaldata.get();
			   return product;
		   }
		   else 
		   {
			return null;
		}
			
		}
	   public void deleteById(long id) 
	   {
	   	productRepository.deleteById(id);
	   }

	   public Product editProductById(Long id ) 
	   {
	   	
	   Optional<ProductEntity> optionalProduct = productRepository.findById(id);
	       
	       if (optionalProduct.isPresent())
	       {
	           ProductEntity productEntity = optionalProduct.get();
	           
	           
	           Product productModel = new Product();
	           
	           productModel.setName(productEntity.getName());
	           productModel.setBrand(productEntity.getBrand());
	           productModel.setMadein(productEntity.getMadeIn());
	           productModel.setPrice(productEntity.getPrice());
	           productModel.setQuantity(productEntity.getQuantity());
	           productModel.setDiscountrate(productEntity.getDiscountPrice());
	           
	           return productModel;
	           
	       } 
	       else
	       {
	           
	           return null; 
	       }
	   	
	   	
	   }
	   public void updateProduct(Long id, ProductEntity product) {
	   	Optional<ProductEntity> optionalData=productRepository.findById(product.getId());
	   	if(optionalData.isPresent())
	   	{
	   		ProductEntity productEntity=optionalData.get();
	   		double stockvalue;
	   		   stockvalue=product.getPrice()*product.getQuantity();
	   		   
	   		   double discountprice;
	   		   discountprice=product.getPrice()*product.getDiscountPrice();
	   		   
	   		   double taxprice;
	   	        taxprice=product.getPrice()*0.18;
	   	        
	   	 	   double offerprice;
	   	       offerprice=product.getPrice()-discountprice;
	   	        
	   		   double finalprice;
	   	        finalprice= offerprice+taxprice;
	   	        
	   	        productEntity.setName(product.getName());
	   	        productEntity.setBrand(product.getBrand());
	   	        productEntity.setMadeIn(product.getMadeIn());
	   	        productEntity.setPrice(product.getPrice());
	   	        productEntity.setQuantity(product.getQuantity());
	   	        productEntity.setDiscountRate(product.getDiscountPrice());
	   	        productEntity.setDiscountPrice(discountprice);
	   	        productEntity.setStockValue(stockvalue);
	   	        productEntity.setTaxPrice(taxprice);
	   	        productEntity.setOfferPrice(offerprice); 
	   	        productEntity.setFinalPrice(finalprice);
	   		 
	   	        productRepository.save(productEntity);
	   	}
	   }
	   }